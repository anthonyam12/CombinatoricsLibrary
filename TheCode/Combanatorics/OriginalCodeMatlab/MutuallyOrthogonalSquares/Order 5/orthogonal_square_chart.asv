% Orthogonal Square Chart
%
% Creates a file with the sets of orthogonal squares.. It finds the sets of
% two first then reads the file in checking each pair with the list of the
% squares in the vector.

%create vector of all reduced squares
fid = fopen('reduced_squares_o5.dat');

reduced_squares = zeros(5,5,0);
j  = 0;
while ~feof(fid)
   A = fscanf(fid, '%u', [5 5]);
   if ~isequal(A,'') 
       reduced_squares = cat(3,reduced_squares,A);
       j = j + 1;
   end
end
[m,n,o] = size(reduced_squares);
squares_to_write = zeroes(5,5,0);

fid_chart = fopen('mutually_orthogonal_squaresO5.dat','w');
fid_squares = fopen ('squares_in_chart.dat', 'w');

%check each square in the vector with each other square in the vector
for i=1:o
   disp('Checking square '); disp(i);
   disp(' out of '); disp(o);
   disp('.');
   currSquare = reduced_squares(:,:,i);
   for j=i+1:o
      checkSquare = reduced_squares(:,:,j);
      %write the pairs to a file
      if (check_latin_square(currSquare,checkSquare))
          fprintf(fid_chart,'%u %u \n', i, j);
          squares_t
      end
   end
end

%close file contianing sets of squares
fclose('all');

%re open file containing the sets, compare sets with the sqaures in the
%vector
%fid_MO_sets = fopen('mutually_orthogonal_squaresO4.dat');

%read in find_MO_sets into an array, then take all the values out of
%reduced_squares that aren't in this array
%index = 1;
%pairs = zeros(1,2,0);
%new_reduced_indexes = zeros(0);
%first_iter = 1;

%while ~feof(fid_MO_sets)
%    first = fscanf(fid_MO_sets, '%u',1);
%    second = fscanf(fid_MO_sets, '%u',1);
%    if isequal(first,'') && isequal(second,'')
%       break; 
%    end
%    pair(index,1) = first;
%    pair(index,2) = second;
    
%    if first_iter
%        new_reduced_indexes = cat(1,new_reduced_indexes, first);
%        new_reduced_indexes = cat(1,new_reduced_indexes, second);
%        first_iter = 0;
%        loop=2;
%    else
%        flag1 = 0;
%        flag2 = 0;
%        for i=1:loop
%            if first == new_reduced_indexes(i)
%               flag1 = 1; %first is in there 
%            end
%            if second == new_reduced_indexes(i)
%               flag2 = 1; %second is in there 
%            end
%        end
%        if ~flag1
%            new_reduced_indexes = cat(1,new_reduced_indexes, first);
%            loop = loop + 1;
%        end
%        if ~flag2
%            new_reduced_indexes = cat(1,new_reduced_indexes, second);
%            loop = loop + 1;
%        end
%    end
%    pairs = cat(3,pairs,pair);
%end
%fclose('all');

%new_reduced_indexes contains the indexes that will be used next
%new_reduced_indexes
%fid_MO_sets = fopen('mutually_orthogonal_squaresO4.dat','a');
%newSquares = zeros(4,4,0);
%for i=1:loop
 %   newSquares = cat(3, newSquares, reduced_squares(:,:,new_reduced_indexes(i)));
%end

%squares remaining to check
%reduced_squares = newSquares;

%check sets of 3
%[l,m,n] = size(new_reduced_indexes);
%[l,w,m] = size(pairs);
%currentSize = 3;

%for i=1:m
%    currentSet = pairs(:,:,1);
%    for j=1:n %try each square with current pairs
%        addNewFlag = 0;
%        currentSquare = reduced_squares(:,:,new_reduced_indexes(j));
%        reduced_squares(:,:,currentSet(1,1))
%        reduced_squares(:,:,currentSet(1,2))
%        for k=1:currentSize-1
%            if (check_latin_square(currentSquare,reduced_squares(:,:,currentSet(1,k))))
%                addNewFlag = addNewFlag + 1;
%            end
%        end
%        if addNewFlag == currentSize-1
%            fprintf(fid_MO_sets,'%u %u %u \n',currentSet(1,1), currentSet(1,2),new_reduced_indexes(j));
%        end
%    end
%end
%fclose('all');
